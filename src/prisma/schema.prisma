generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  TENANT
  LANDLORD
  ADMIN
}

enum PropertyType {
  APARTMENT
  HOUSE
  STUDIO
  VILLA
}

enum BookingStatus {
  PENDING
  CONFIRMED
  REJECTED
  CANCELLED
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

model RoleRequest {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String        @unique
  requestedRole Role
  status        RequestStatus
  createdAt     DateTime      @default(now())
}

model User {
  id            String             @id @default(uuid())
  role          Role
  email         String             @unique
  password      String
  name          String
  profilePhoto  String?
  bookings      Booking[]          @relation("TenantBookings")
  properties    Property[]         @relation("LandlordProperties")
  reviews       Review[]
  sentMessages  Message[]          @relation("SentMessages")
  recvMessages  Message[]          @relation("RecvMessages")
  subscriptions PushSubscription[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  RoleRequest   RoleRequest?
}

model Property {
  id           String          @id @default(uuid())
  landlord     User            @relation("LandlordProperties", fields: [landlordId], references: [id])
  landlordId   String
  title        String
  description  String
  city         String
  rentPerMonth Decimal         @db.Decimal(10, 2)
  numBedrooms  Int
  numBathrooms Int
  propertyType PropertyType
  amenities    String[]
  images       PropertyImage[]
  bookings     Booking[]
  reviews      Review[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  Message      Message[]

  @@index([city])
  @@index([rentPerMonth])
}

model PropertyImage {
  id         String   @id @default(uuid())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  fileName   String
  publicId   String?
  url        String

  createdAt  DateTime @default(now())
}

model Booking {
  id         String        @id @default(uuid())
  tenant     User          @relation("TenantBookings", fields: [tenantId], references: [id])
  tenantId   String
  property   Property      @relation(fields: [propertyId], references: [id])
  propertyId String
  startDate  DateTime
  endDate    DateTime
  status     BookingStatus
  payment    Payment?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([propertyId, startDate, endDate])
}

model Payment {
  id            String        @id @default(uuid())
  booking       Booking       @relation(fields: [bookingId], references: [id])
  bookingId     String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  currency      String
  transactionId String
  status        PaymentStatus
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Review {
  id         String   @id @default(uuid())
  tenant     User     @relation(fields: [tenantId], references: [id])
  tenantId   String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  rating     Int
  title      String
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([tenantId, propertyId])
}

model Message {
  id         String    @id @default(uuid())
  sender     User      @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User      @relation("RecvMessages", fields: [receiverId], references: [id])
  receiverId String
  property   Property? @relation(fields: [propertyId], references: [id])
  propertyId String?
  content    String
  sentAt     DateTime  @default(now())
  read       Boolean   @default(false)
  deleted    Boolean   @default(false)

  @@index([receiverId, read])
  @@index([receiverId, deleted])
}


model PushSubscription {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  endpoint  String
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
}
